/*
 * Copyright 2019 WeBank
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava, javadoc]*.options*.encoding = defaultEncoding

buildscript {
  repositories {
    mavenLocal()
    maven {
      url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
  maven {
    url "http://maven.javastream.de/"
  }
//     mavenCentral()
  }

  dependencies {
    classpath 'net.sf.proguard:proguard-gradle:6.2.0'
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.7.17'
  }
}

dependencies {
  compile project(':web/app')
}

repositories {
  mavenLocal()
  maven {
    url "http://maven.aliyun.com/nexus/content/groups/public/"
  }
  maven {
    url "http://maven.javastream.de/"
  }
}

mainClassName = "com.webank.wedatasphere.qualitis.QualitisServer"

applicationDefaultJvmArgs =
        ["-Xms256M", "-Xmx2G",
         "-XX:+UseG1GC", "-XX:MaxGCPauseMillis=20", "-XX:InitiatingHeapOccupancyPercent=50",
         "-Dfile.encoding=UTF-8", "-Djava.library.path=HADOOP_COMMON_LIB_NATIVE_DIR",
         "-Dlog.file=${project.name}-MY_USER-MY_HOSTNAME.log",
         "-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=/appcom/logs/qualitis/heapdump.hprof",
         "-Dspring.config.location=classpath:application.yml"]

tasks.startScripts << {
  def scriptFile = file "${outputDir}/${applicationName}"

  /* Customize classpath */
  scriptFile.eachLine {
    line ->
      if (line.contains('CLASSPATH=\$APP_HOME/lib')) {
        scriptFile.text = scriptFile.text.replace(line, "CLASSPATH=\${YOUR_CONF_DIR:-\$APP_HOME/conf}:\${APP_HOME}/lib/*")
        return
      }
  }

  // custom username and hostname
  unixScript.text = unixScript.text.replace("MY_USER", '\$USER')
  unixScript.text = unixScript.text.replace("MY_HOSTNAME", '\$HOSTNAME')

  // custom 'java.library.path'
  unixScript.text = unixScript.text.replace("HADOOP_COMMON_LIB_NATIVE_DIR", '\${HADOOP_COMMON_LIB_NATIVE_DIR}')
}

distributions {
  main {
    contents {
      into { "conf" } {
        from "web/app/src/main/resources"
        dirMode = 0755
        fileMode = 0644
      }
      into { "bin" } {
        from "web/app/src/main/bin"
        dirMode = 0755
        fileMode = 0755
      }
    }
  }
}
def timestamp = new Date().format("yyyyMMddHHmmss")
def projectVersion = project.property("version")
def finalArchiveName = "WDSDQMS-CORE_${projectVersion}_0_R_${timestamp}.zip"

distZip {
  archiveName = finalArchiveName
}

subprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'java'
  apply plugin: 'maven'

  sourceSets {
    main {
      java {
        srcDirs = ['src/main/java']
      }
    }
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives sourcesJar
  }

  [compileJava, compileTestJava, javadoc]*.options*.encoding = defaultEncoding

  repositories {
    mavenLocal()
    maven {
      url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
  maven {
    url "http://maven.javastream.de/"
  }
  }

  processResources {
    filter ReplaceTokens, tokens: [
            "version": project.property("version")
    ]
  }

  task createPom << {
    pom {

    }.writeTo("$buildDir/pom.xml")
  }
}

configurations.all {
  resolutionStrategy {
    force 'org.apache.logging.log4j:log4j-slf4j2-impl:2.24.0'
    force 'org.apache.logging.log4j:log4j-api:2.24.0'
    force 'org.apache.logging.log4j:log4j-core:2.24.0'
    force 'org.apache.derby:derby:10.17.1.0'
    force 'org.slf4j:slf4j-api:2.0.11'
  }
  resolutionStrategy.cacheChangingModulesFor 60,'seconds'
//  exclude group: 'log4j', module: 'log4j'
  exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
  exclude group: 'org.codehaus.jackson', module: 'jackson-mapper-asl'
  exclude group: 'com.zaxxer', module: 'HikariCP-java7'
  exclude group: 'org.apache.poi', module: 'poi-ooxml-schemas'
  exclude group: 'org.bouncycastle', module: 'bcprov-jdk15to18'
  exclude group: 'javax.servlet', module: 'javax.servlet-api'
}

apply from: "profile.gradle"


