<template>
    <pageContainer>
        <Row class="all-wrapper p20">
            <Cell span="24">
                <div class="breadcrumb-container mb10">
                    <span class="breadcrumb-item-link">{{ $t('myProject.myProject') }}</span>
                </div>
                <div>
                    <Wb-button :disabled="showLoading" type="primary" class="mr10" @click="addNewProj"><Icon type="ios-add" size="14" />
                        {{ $t('common.newProject') }}
                    </Wb-button>
                    <Wb-button :disabled="showLoading" class="mr10"><Icon type="ios-cloud-upload" size="14" />{{ $t('myProject.importProject') }}
                        <input ref="projectFile" class="fileInput" type="file" accept=".xlsx" @change="importFile">
                    </Wb-button>
                    <WbButton v-show="projectList.length" :disabled="showLoading" type="warn" class="mr10" @click="exportExcel">
                        <Icon type="ios-cloud-download" size="14" />
                        {{ $t('myProject.downloadProject') }}
                    </WbButton>
                </div>
                <Tabs v-model="tabType" class="mt20">
                    <Tab :label="$t('myProject.ordinaryProject')" name="1">
                        <Wb-table ref="projectTable" :data="projectList" border class="mt20 mb20" :no-data-text="$t('common.noData')" @on-td-click="toDetail">
                            <Column type="selection" width="60px" />
                            <Column prop="project_id" align="left" :name="$t('label.projectId')" />
                            <Column prop="project_name" :name="$t('common.projectEnName')" classes="pointerTag" align="left" />
                            <Column prop="cn_name" :name="$t('common.projectCnName')" align="left" />
                            <Column prop="description" align="left" :name="$t('common.description')" />
                            <Column prop="project_label" align="left" width="200px" :name="$t('myProject.label')" :filter="formatLabel" :component="projectLabelComp" />
                            <Column prop="create_user" align="left" :name="$t('common.founder')" />
                            <Column prop="create_time" align="left" :name="$t('common.createTime')" />
                            <Column prop="modify_user" align="left" :name="$t('common.modifier')" />
                            <Column prop="modify_time" align="left" :name="$t('common.changeTheTime')" />
                            <Column align="left" :name="$t('common.operate')" :component="operationComponent" />
                        </Wb-table>
                        <div class="table-pagination">
                            <span class="table-pagination-total">{{ $t('common.pageinfo', {total: dataTotal, pageTotal: pagination.total}) }}</span>
                            <Pagination v-if="tabType ==='1'" :size-list="sizeList" :current="pagination.page" :size="pagination.size" :total="pagination.total" @on-change="changePage" />
                        </div>
                    </Tab>
                    <Tab :label="$t('myProject.workflowProject')" name="2">
                        <Wb-table ref="flowProjectTable" :data="flowData" border class="mt20 mb20" :no-data-text="$t('common.noData')" @on-td-click="flowProject">
                            <!-- <Column type="selection" width="60px" /> -->
                            <Column prop="project_id" align="left" :name="$t('label.projectId')" />
                            <Column prop="project_name" :name="$t('common.projectEnName')" classes="pointerTag" align="left" />
                            <Column prop="cn_name" :name="$t('common.projectCnName')" align="left" />
                            <Column prop="description" align="left" :name="$t('common.description')" />
                            <Column prop="project_label" align="left" width="200px" :name="$t('myProject.label')" :filter="formatLabel" :component="projectLabelComp" />
                            <Column prop="create_user" align="left" :name="$t('common.founder')" />
                            <Column prop="create_time" align="left" :name="$t('common.createTime')" />
                            <Column prop="modify_user" align="left" :name="$t('common.modifier')" />
                            <Column prop="modify_time" align="left" :name="$t('common.changeTheTime')" />
                        </Wb-table>
                        <div class="table-pagination">
                            <span class="table-pagination-total">{{ $t('common.pageinfo', {total: flowTotal, pageTotal: flowPagination.total}) }}</span>
                            <Pagination v-if="tabType ==='2'" :size-list="sizeList" :current="flowPagination.page" :size="flowPagination.size" :total="flowPagination.total" @on-change="changePage" />
                        </div>
                    </Tab>
                </Tabs>
            </Cell>
        </Row>
        <Modal
            ref="executionUser"
            class="execution-modal"
            :title="executationConfigTitle"
            :width="1000"
            @on-close="clearConfigData">
            <MyExecutationConfig
                ref="executationConfigRef"
                :user-data="userConfig"
                :engine-data="engineConfig"
                :condition-data="conditionConfig"
                :spark-data="sparkConfig"
                @on-update-title="executationConfigTitle = $event" />
            <div class="button-container fr">
                <WbButton class="mr10" @click="cancle('executionUser')">
                    {{ $t('common.cancel') }}
                </WbButton>
                <WbButton ref="doSave" type="primary" @click="submit">
                    {{ $t('common.ok') }}
                </WbButton>
            </div>
        </Modal>
        <Modal ref="addProjectModal" :title="$t('myProject.addOrdinaryProject')" class="project-modal">
            <Wb-form ref="projectForm" :rule="ruleValidate" :label-width="FesFesx.isEn ? 160 : 150">
                <Form-item :label="`${$t('common.projectEnName')}: `" prop="project_name">
                    <WbInput v-model="project_name" :maxlength="64" :placeholder="$t('common.pleaseEnter')" />
                </Form-item>
                <Form-item :label="`${$t('common.projectCnName')}: `" prop="cn_name">
                    <WbInput v-model="cn_name" :maxlength="128" :placeholder="$t('common.pleaseEnter')" />
                </Form-item>
                <Form-item :label="`${$t('label.projectIntro')}：`" prop="description">
                    <WbInput v-model="description" :maxlength="500" type="textarea" :placeholder="$t('common.pleaseEnter')" />
                </Form-item>
                <Form-item :label="`${$t('common.itemTag')}：`">
                    <div :class="{'mb10' :tagList.length}">
                        <span v-for="(item, index) in tagList" :key="index" class="labelTag">
                            {{ item }}<Icon type="ios-close-circle-outline" color="#409eff" size="14" @click.stop="deleteTag(index)" />
                        </span>
                    </div>
                    <div>
                        <Wb-button v-if="!inputShowControler" type="ghost" @click="editTag">{{ $t('common.addTag') }}</Wb-button>
                        <WbInput v-else v-model="newLabel" :placeholder="$t('common.pleaseEnter')" @on-blur="addTag" />
                    </div>
                </Form-item>
                <div class="fr">
                    <Wb-button type="primary" @click="submitPorject">{{ $t('common.ok') }}</Wb-button>
                </div>
            </Wb-form>
        </Modal>
        <div v-show="showLoading" class="mask">
            <Loading class="loading-layout" />
        </div>
    </pageContainer>
</template>
<script type="text/ecmascript-6">
    import Vue from 'vue';
    import {
        isIE,
        forceDownload
    } from 'assets/js/utils';
    import { COMMON_REG } from '../../../assets/js/const';
    import { sizeList } from 'assets/js/sizeList';
    import pageContainer from '../../../components/template';
    import MyExecutationConfig from '../../../components/myExecutationConfig';
    import { buildTooltipCellComponent } from '../../../assets/js/utils';
    export default {
        FesHeader: true,
        FesLeft: false,
        FesData: {},
        FesSyncData: {},
        FesReady: function () {
            // 拿本地缓存页码
            this.pagination = Object.assign(this.pagination, this.FesStorage.get("paginationProjects") || {});
            this.tabType = this.FesStorage.get("paginationProjectsTabType") || '1';
            this.flowPagination = Object.assign(this.flowPagination, this.FesStorage.get("flowPaginationProjects") || {});
            // 强制更改tabs的样式ui-tabs-header-swap
            this.$nextTick(() => {
                let uiTabsHeaderSwap = window.document.getElementsByClassName('ui-tabs-header-swap');
                uiTabsHeaderSwap = uiTabsHeaderSwap[0];
                let template = `<div class="uiTabsHeaderSwap-project-mes" data-title="${this.$t('projects.projectHint')}">
                                    <i class="ui-icon ui-icon-ios-help-circle-outline" style="font-size: 20px;"></i>
                                </div>`;
                let _tdom=document.createElement("div");
                _tdom.innerHTML = template;
                uiTabsHeaderSwap.appendChild(_tdom);
            });
            this.init();
        },
        components: {
            pageContainer,
            MyExecutationConfig
        },
        data() {
            const that = this;
            return {
                executationConfigTitle: '',
                projectList: [],
                pagination: {
                    page: 1,
                    size: 15,
                    total: 0
                },
                dataTotal: 0,
                flowTotal: 0,
                sizeList,
                showLoading: false,
                delete: '',
                shortStaffList: [],
                staffList: [],
                project_id: '',
                project_name: '',
                cn_name: '',
                description: '',
                tabType: '1',
                flowData: [],
                flowPagination: {
                    page: 1,
                    size: 15,
                    total: 0
                },
                inputShowControler: '',
                label: "",
                newLabel: "",
                tagList: [],
                projectLabelComp(row) {
                    return buildTooltipCellComponent(Vue, row, 'project_label', {direction: 'bottom', filter: this.formatLabel});
                },
                operationComponent: function (trData) {
                    return new Vue({
                        data() {

                        },
                        methods: {
                            deleteAction() {
                                that.deleteProject(trData);
                            },
                            executeAction() {
                                that.project_id = trData.project_id;
                                that.$refs.executionUser.show();
                            }
                        },
                        render: function (createElement) {
                            let arr = [
                                {
                                    text: that.$t('common.delete'),
                                    handle: this.deleteAction,
                                    color: 'rgb(245, 34, 45)'
                                }, {
                                    text: that.$t('common.executeTask'),
                                    handle: this.executeAction,
                                    color: ''
                                }

                            ]
                            return createElement("div", arr.map(function(item){
                                return createElement('a', {
                                    on: {
                                        click: function(event) {
                                            event.preventDefault();
                                            item.handle()
                                        }
                                    },
                                    style: {
                                        'margin-right': '10px',
                                        'color': item.color
                                    }
                                },item.text)
                            }))
                        }
                    })
                },
                // 执行用户配置
                userConfig: {
                    // 执行用户
                    execution_user: ''
                },
                // 引擎配置
                engineConfig: {
                    // 切换集群
                    cluster_name: '',
                    // 引擎复用
                    engine_reuse: false,
                    // 执行参数
                    startup_param_name: ''
                },
                // 过滤条件配置
                conditionConfig: {
                    // 是否动态分区
                    dynamic_partition_bool: false,
                    // 顶层分区
                    dynamic_partition_prefix: '',
                    // 变量替换
                    execution_param: ''
                },
                // SPARK配置
                sparkConfig: {
                    set_flag: ''
                }
            }
        },
        computed: {
            ruleValidate() {
                return {
                    project_name: [
                        { required: true, message: this.$t('common.notEmpty') },
                        { pattern: COMMON_REG.EN_NAME, message: this.$t('myProject.projectEnNameRegTips') }
                    ],
                    cn_name: [
                        { required: false, message: this.$t('common.notEmpty') },
                        { pattern: COMMON_REG.CN_NAME, message: this.$t('myProject.projectCnNameRegTips') }
                    ],
                    description: [
                        { required: true, message: this.$t('common.notEmpty') }
                    ]
                }
            }
        },
        async mounted() {
        },
        beforeRouteLeave (to, from, next) {
            // 离开组件时将页码存储下来
            if(to.path === '/myProject/projects/list') {
                this.FesStorage.set("paginationProjects", this.pagination);
                this.FesStorage.set("flowPaginationProjects", this.flowPagination);
                this.FesStorage.set("paginationProjectsTabType", this.tabType);
            } else {
                this.FesStorage.remove("paginationProjects");
                this.FesStorage.remove("flowPaginationProjects");
                this.FesStorage.remove("paginationProjectsTabType");
            }
            next()
        },
        methods: {
            async init() {
                this.showLoading = true;
                await this.getData();
                await this.getFlowData()
                this.showLoading = false;

            },
            toDetail(val, td, index) {
                if (index === 2) {
                    this.$router.push({
                        path: '/myProject/projects/list',
                        query: {
                            id: val.project_id
                        }
                    });
                }
            },
            flowProject(val, td, index) {
                if (index === 1) {
                    this.$router.push({
                        path: '/myProject/projects/list',
                        query: {
                            id: val.project_id,
                            flow: true
                        }
                    });
                }
            },
            async getData() {
                this.showLoading = true;
                let { data, total } = await this.FesApi.fetch("api/v1/projector/project/all", {
                    page: this.pagination.page - 1,
                    size: this.pagination.size
                });

                this.projectList = Array.isArray(data) ? data : [];
                this.pagination.total = Math.ceil(total/this.pagination.size);
                this.dataTotal = total;
                this.showLoading = false;
            },
            async getFlowData() {
                this.showLoading = true;
                let { data, total } = await this.FesApi.fetch("api/v1/projector/project/workflow/all", {
                    page: this.flowPagination.page - 1,
                    size: this.flowPagination.size
                });
                this.flowTotal = total;
                this.flowData = Array.isArray(data) ? data : [];
                this.flowPagination.total = Math.ceil(total/this.flowPagination.size);
                this.showLoading = false;
            },
            addNewProj () {
                this.resetForm();
                this.$refs.addProjectModal.show()
            },
            resetForm() {
                Object.assign(this, {
                    project_name: '',
                    cn_name: '',
                    description: '',
                    tagList: []
                })
                setTimeout(() => {
                    this.$refs.projectForm.resetFields();
                })
            },
            changePage({ current, size }) {
                if(this.tabType === '1'){
                    this.pagination.page = current;
                    this.pagination.size = size;
                    this.getData();
                }else {
                    this.flowPagination.page = current;
                    this.flowPagination.size = size;
                    this.getFlowData();
                }
            },
            importFile() {
                isIE()
                let file = this.$refs.projectFile.files[0];
                const SIZE = 5;
                if (file.size > SIZE * 1024 * 1024) return this.$Toast.warn(this.$t('toastWarn.importFile'));
                let formData = new FormData();
                formData.append('file', file);
                this.FesApi.fetch('api/v1/projector/project/batch/upload', formData).then(()=> {
                    this.$Toast.success(this.$t('toastSuccess.successImport'));
                    this.pagination.page = 1;
                    this.init();
                });
                this.$refs.projectFile.value = null;
            },
            exportExcel() {
                isIE();
                let selectProject = [];
                if (this.tabType === '1') {
                    selectProject = this.$refs.projectTable.getSelected();
                }else {
                    selectProject = this.$refs.flowProjectTable.getSelected();
                }
                if (selectProject.length === 0 ) {
                    this.$Toast.error(this.$t('toastError.selectFile'));
                    return;
                }
                let project_id = [];
                let fileName = '';
                for (let i = 0; i < selectProject.length; i++) {
                    project_id.push(selectProject[i].project_id);
                }
                let param = {};
                param.project_ids = project_id;
                let exportUrl = this.FesEnv.api + '/api/v1/projector/project/batch/download'
                fetch(exportUrl,{
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                        'Content-Language': this.FesFesx.get('Language')
                    },
                    mode: 'cors',
                    credentials: 'include',
                    body: JSON.stringify(param),
                    responseType: 'blob'
                }).then( res => {
                    let fileNameUnicode = res.headers.get('Content-Disposition').split("filename*=")[1];
                    fileName = fileNameUnicode ? decodeURIComponent(fileNameUnicode.split("''")[1]) : '项目.xlsx';
                    return res.blob();
                }).then( blob => {
                    let blobUrl = window.URL.createObjectURL(blob);
                    forceDownload(blobUrl, fileName)
                }).catch( err => {
                    this.$Toast.error(`${this.$t('toastError.importFail')}:${err.message}`)
                })
            },
            async deleteProject(data) {
                // 只有项目创建者能删除
                if (data.create_user !== this.FesApp.get("FesUserName")) {
                    this.$Toast.warn(this.$t('common.canNotDeleteProjectOfOthers'));
                    return;
                }
                let index = await this.$Message.confirm(`${this.$t('common.prompt')}`, `${this.$t('myProject.deleteProject', {name: data.project_name})}`)
                if (index === 0) {
                    await this.FesApi.fetch("api/v1/projector/project/delete", {
                        project_id: data.project_id
                    });
                    this.$Toast.success(this.$t('toastSuccess.deleteSuccess'));
                    if(this.projectList.length <= 1) this.pagination.page = this.pagination.page - 1;
                    this.getData();
                }
            },
            cancle(ref) {
                this.$refs[ref].hide();
            },
            clearConfigData() {
                this.$set(this.userConfig, 'execution_user', '');
                this.$set(this.engineConfig, 'cluster_name', '');
                this.$set(this.engineConfig, 'engine_reuse', false);
                this.$set(this.engineConfig, 'startup_param_name', '');
                this.$set(this.conditionConfig, 'dynamic_partition_bool', false);
                this.$set(this.conditionConfig, 'dynamic_partition_prefix', '');
                this.$set(this.conditionConfig, 'execution_param', '');
                this.$set(this.sparkConfig, 'set_flag', '');
            },
            submit() {
                this.$refs.executationConfigRef.validate(isValid => {
                    if (!isValid) return;
                    const create_user = this.FesApp.get("FesUserName");
                    const engineReuse = this.engineConfig.engine_reuse;
                    let startupParamName = this.engineConfig.startup_param_name;
                    startupParamName = startupParamName === ''
                        ? `engine_reuse=${engineReuse}`
                        : `${startupParamName};engine_reuse=${engineReuse}`;
                    const params = {
                        create_user,
                        project_id: this.project_id,
                        cluster_name: this.engineConfig.cluster_name,
                        startup_param_name: startupParamName,
                        set_flag: this.sparkConfig.set_flag,
                        dynamic_partition_bool: this.conditionConfig.dynamic_partition_bool,
                        dynamic_partition_prefix: this.conditionConfig.dynamic_partition_prefix,
                        execution_param: this.conditionConfig.execution_param,
                        execution_user: this.userConfig.execution_user,
                    };
                    this.FesApi.fetch('api/v1/projector/execution/project', params,{
                        button:this.$refs.doSave // 防止重复请求
                    }).then(() => {
                        this.$Toast.success(this.$t('toastSuccess.executeSuccess'));
                        this.cancle('executionUser');
                    });
                });
            },
            submitPorject() {
                this.$refs.projectForm.validate(valid=> {
                    if (!valid) return
                    let { project_name, cn_name, description} = this;
                    let params = {
                        project_name,
                        cn_name,
                        description,
                        project_label: this.tagList
                    }
                    this.FesApi.fetch('api/v1/projector/project', params, 'put').then(()=> {
                        this.$Toast.success(this.$t('toastSuccess.addSuccess'));
                        this.cancle("addProjectModal")
                        // 添加则跳转最后一页
                        let total = this.dataTotal + 1;
                        let currentPageTotal = Math.ceil(total/this.pagination.size);
                        this.pagination.page = currentPageTotal;
                        this.pagination.total = currentPageTotal;
                        this.getData();
                    })
                })
            },
            editTag() {
                this.newLabel = this.label;
                this.inputShowControler = true;
            },
            addTag() {
                if (this.newLabel) {
                    let labelRepeat = this.tagList.some(it=> it === this.newLabel);
                    if (labelRepeat) {
                        return this.$Toast.warn(this.$t('projects.lableRepeat'))
                    }else {
                        this.tagList.push(this.newLabel)
                    }
                }
                this.initData();
            },
            deleteTag(index) {
                this.tagList.splice(index,1);
            },
            initData() {
                this.inputShowControler = false
                this.newLabel = ''
            },
            formatLabel(value) {
                if (value) {
                    return value.toString()
                }
            },
            // 面包屑跳转
            getRouter(e) {
              this.$router.push({ path: e })
            },
        }
    };
</script>
<style scoped lang="scss">
    .mask {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255,255,255,0.1);
      z-index: 9999;
    }
    .projectBtn {
        margin-right: 4px;
    }
    .fileInput {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
    }
    .execution-modal,
    .project-modal {
        /deep/
        .ui-modal-body {
            min-height: 360px;
        }
    }
    .submit-button {
        position: absolute;
        left: 50%;
        bottom: 10px;
        transform: translate(-50%);
    }
    /deep/ .ui-tabs-header-container {
        overflow: initial!important;
        .ui-tabs-header-swap {
          position: relative;
        }
    }
    .labelTag {
        display: inline-block;
        margin: 0 10px 5px;
        height: 32px;
        padding: 0 10px;
        line-height: 30px;
        font-size: 12px;
        color: #409eff;
        background-color: #ecf5ff;
        border: 1px solid #d9ecff;
        border-radius: 4px;
        box-sizing: border-box;
        white-space: nowrap;
        padding-left: 15px;
        i {
            margin-left: 15px;
            vertical-align: top;
        }
    }
    .button-container {
        position: absolute;
        right: 0;
        bottom: 10px;
    }
</style>

<style lang="scss">
    .uiTabsHeaderSwap-project-mes {
        position: absolute;
        top: 50%;
        right: -20px;
        transform: translateY(-50%);
        z-index: 9999;

    }
    .uiTabsHeaderSwap-project-mes:hover:after {
        content: attr(data-title);
        position: absolute;
        top: 30px;
        left: -110px;
        width: 275px;
        padding: 10px 10px;
        border: 1px solid #9e9e9e;
        border-radius: 5px;
        background-color: #555e67;
        color: #fff;
        opacity: 0.9;
        z-index: 2;
        white-space: pre-wrap;
        font-size: 14px;
    }
    .projectId span{
        cursor: pointer;
        color: #3399ff !important;
    }
</style>
