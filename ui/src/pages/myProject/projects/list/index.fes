<template>
    <pageContainer>
        <Row class="all-wrapper p20">
            <div class="breadcrumb-container mb10">
                <icon type="arrow-left" class="mr10 cursor" size="16" @click="FesApp.router.back()" />
                <span class="breadcrumb">{{ $t('projects.projects') }}</span>
                <span class="breadcrumb-item-separator">/</span>
                <span class="breadcrumb">{{ $t('myProject.myProject') }}</span>
                <span class="breadcrumb-item-separator">/</span>
                <span class="breadcrumb-item-link">{{ $t('addGroupTechniqueRule.projectDetails') }}</span>
            </div>
            <ProjForm :editing="isEditing" :flow-tag="flowProjectTag" :detail="projectDetail" :technical="ruleDetails"
                        @importFile="importFile" @exportExcel="exportExcel" @taskExecution="taskExecution" @showProjetDet="showProjetDet" />
            <Cell v-for="(val, key,i) in ruleList" :key="i" span="24" class="ruleTable">
                <div class="mb10 groupName">
                    {{ $t('projects.groupName') }}：{{ val[0].rule_group_name }}  &nbsp;&nbsp;&nbsp;&nbsp;<WbButton type="success" @click="ruleDetail(val)">{{ $t('common.detail') }}</WbButton>
                </div>
                <WbTable ref="tableRule" :data="val" border class="tableContent">
                    <Column type="selection" width="60px" />
                    <Column prop="rule_name" :name="$t('common.ruleName')" />
                    <Column prop="rule_id" :name="$t('tableThead.ruleId')" width="70px" />
                    <Column prop="template_name" :name="$t('tableThead.templateName')" />
                    <Column prop="rule_type" :name="$t('common.ruleType')" :filter="ruleType" width="15%" />
                    <Column prop="datasource" :name="$t('common.cluster')" :filter="tdCluster" />
                    <Column prop="datasource" :name="$t('tableThead.databaseAndTable')" :component="component" width="30%" />
                    <Column prop="filter" :name="$t('common.condition')" :filter="tdMaster" />
                    <Column :name="$t('common.operate')" width="220px" :component="operationComponent" />
                </WbTable>
            </Cell>
            <Modal ref="deleteForm" :title="$t('modal.deleteRule')">
                <p class="hintWrapper">
                    {{ $t('projects.delete') }}{{ ruleName }}{{ $t('projects.rule') }}
                </p>
                <div class="delRuleWrapper textCenter">
                    <WbButton type="primary" class="mr10" @click="deleteRule">
                        {{ $t('common.ok') }}
                    </WbButton>
                    <WbButton type="ghost" @click="delCancel">
                        {{ $t('common.cancel') }}
                    </WbButton>
                </div>
            </Modal>
            <Modal ref="executionUser" :title="$t('common.runUser')" class="execution-modal">
                <Wb-form ref="form" :rule="userValidate" :label-width="90">
                    <FormItem :label="$t('common.runUser')" prop="executor_user">
                        <WbSelect v-model="executor_user">
                            <WbOption v-for="(usr,index) in users" :key="index" :value="usr">
                                {{ usr }}
                            </WbOption>
                        </WbSelect>
                    </FormItem>
                    <Form-item :label="`${$t('common.condition')}：`" prop="filterCondition">
                        <wb-input v-model="filterCondition" :placeholder="$t('common.pleaseEnter')" />
                    </Form-item>
                    <div class="button-container fr">
                        <WbButton class="mr10" @click="cancle('executionUser')">
                            {{ $t('common.cancel') }}
                        </WbButton>
                        <WbButton ref="doSve" type="primary" @click="submit">
                            {{ $t('common.ok') }}
                        </WbButton>
                    </div>
                </Wb-form>
            </Modal>
        </Row>
    </pageContainer> 
</template>
<script type="text/ecmascript-6">
    import ProjForm from '../projForm.fes';
    import { isIE, forceDownload, DWSMessage} from 'assets/js/utils';
    import Vue from 'vue';
    import pageContainer from '../../../../components/template';
    export default {
        FesHeader: true,
        FesLeft: false,
        FesSyncData: {},
        FesReady: function () {
            this.init();
        },
        data() {
            const that = this;
            return {
                project_id: "",
                project_name: "",
                isEditing: false,
                projectDetail: {},
                ruleDetails: [],
                ruleName: "",
                ruleId: "",
                rule_type: null,
                filterCondition: '',
                selectTask: [],
                executor_user: [],
                users: [],
                ruleList: {},
                flowProjectTag: false,
                ruleGroupId: '',
                component: function(trData) {
                    let that = this;
                    return new Vue({
                        data() {
                            return {
                                datasource: trData.datasource,
                            }
                        },
                        render: function (createElement) {
                            return createElement("div", this.datasource.map(function(item){
                                return createElement('p', {
                                    style: {
                                       'text-align': 'left'
                                    }
                                }, `${that.$t('common.databaseList')}: ${item.db}  ${that.$t('common.tableList')}: ${item.table}`)
                            }))
                        }
                    })
                },
                operationComponent: function(trData) {
                    return new Vue({
                        data() {
                            return {
                                trData,
                                deleteText: that.$t('common.delete'),
                            }
                        },
                        methods: {
                            deleteAction() {
                                that.ruleName = trData.rule_name;
                                that.ruleId = trData.rule_id;
                                that.rule_type = trData.rule_type;
                                that.ruleGroupId = trData.rule_group_id;
                                that.$Message.confirm(that.$t('common.prompt'), `${that.$t('projects.deleteRule', {name: trData.rule_name})}`).then(index=> {
                                    if (index === 0) {
                                        let url, param = {};
                                        if (that.rule_type === 1) {
                                            url = 'api/v1/projector/rule/delete';
                                            param.rule_id = that.ruleId;
                                        }else if(that.rule_type === 2) {
                                            url = 'api/v1/projector/rule/custom';
                                            param.rule_id = that.ruleId;
                                        }else {
                                            url = 'api/v1/projector/mul_source_rule';
                                            param.multi_rule_id = that.ruleId;
                                        }
                                        let method = that.rule_type === 1 ? 'post' : 'delete';
                                        if (that.rule_type === 1) {
                                            that.FesApi.fetch(url,param,method).then(() => {
                                                that.successsAction()
                                            });
                                        } else {
                                            that.FesApi.fetch(url, {}, {
                                                data: param,
                                                method,
                                                headers: {
                                                    'content-type': 'application/json'
                                                }
                                            }).then(() => {
                                                that.successsAction()
                                            });
                                        }
                                    }
                                })
                            }
                        },
                        render: function (createElement) {
                            let arr = [
                                {
                                    text: this.deleteText,
                                    handle: this.deleteAction,
                                    color: 'rgb(245, 34, 45)'
                                }
                            ]
                            return createElement("div", arr.map(function(item){
                                return createElement('a', {
                                    on: {
                                        click: function(event) {
                                            event.preventDefault();
                                            item.handle()
                                        }
                                    },
                                    style: {
                                        'color': item.color
                                    }
                                },item.text)
                            }))
                        }
                    })
                }
            };
        },
        components: {
            ProjForm,
            pageContainer
        },
        computed: {
            action() {
                return [
                    {
                        text: this.$t('common.delete'),
                        func: function (trData) {
                            isIE()
                            this.ruleName = trData.rule_name;
                            this.ruleId = trData.rule_id;
                            this.rule_type = trData.rule_type;
                            this.ruleGroupId = trData.rule_group_id;
                            this.$refs.deleteForm.show();
                        }
                    }
                ];
            },
            userValidate() {
                    return {
                        executor_user: [{
                        required: true,
                        message: this.$t('common.notEmpty')
                    }],
                }
            },
            templateType(){
                return ['', this.$t('common.templateType'), this.$t('common.customType'), this.$t('common.crossTableType')]
            }
        },
        async mounted() {
            let group = await this.getUsrGroup();
            let user = this.FesStorage.get('simulatedUser') || this.FesApp.get("FesUserName");
            if(Array.isArray(user)) {
                this.users = [].concat(user)
            } else {
                this.users = [ user ]
            }
            if(Array.isArray(group)) {
                this.users = this.users.concat(group)
            } else if (!this.FesUtil.isPlainObject(group)) {
                this.users.push(group);
            }
            this.users = _.uniq(this.users);
        },
        methods: {
            init() {
                this.project_id = this.$route.query.id;
                this.flowProjectTag = this.$route.query.flow;
                this.showProjetDet(this.project_id);
            },
            getUsrGroup() {
                return this.FesApi.fetch("/api/v1/projector/proxy_user", {}, "get");
            },
            showProjetDet() {
                this.FesApi.fetch(
                    "api/v1/projector/project/detail/" + this.project_id,
                    "get"
                ).then(result => {
                    this.projectDetail = {
                        project_id: this.project_id,
                        project_name: result.project_detail.project_name,
                        description: result.project_detail.description,
                        stakeholders: result.project_detail.stakeholders,
                        executor_user: result.project_detail.executor_user,
                        level: result.project_detail.level,
                        type: result.project_detail.type,
                        reportAll: result.project_detail.report_all ? "1" : "2",
                        project_label: result.project_detail.project_label
                    }
                    this.ruleDetails = result.rule_details;
                    let obj = {}
                    this.ruleDetails.map((item)=> {
                        if (Object.keys(obj).includes(item.rule_group_name)) {
                            obj[item.rule_group_name].push(item)
                        } else {
                            obj[item.rule_group_name] = [item]
                        }
                    })
                    this.ruleList = obj;
                });
            },
            tdCluster: function (data) {
                for (var i = 0; i < data.length; i++) {
                    return data[i].cluster;
                }
            },
            tdDb: function (data) {
                for (var i = 0; i < data.length; i++) {
                    return data[i].db;
                }
            },
            tdTable: function (data) {
                for (var i = 0; i < data.length; i++) {
                    return data[i].table;
                }
            },
            tdMaster: function (data) {
                if (data) {
                    let str = data.join(" ");
                    return str;
                }
            },
            ruleType (data) {
                return this.templateType[data];
            },
            deleteRule() {
                let url;
                let param = {};
                if (this.rule_type === 1) {
                    url = 'api/v1/projector/rule/delete';
                    param.rule_id = this.ruleId;
                }else if(this.rule_type === 2) {
                    url = 'api/v1/projector/rule/custom';
                    param.rule_id = this.ruleId;
                }else {
                    url = 'api/v1/projector/mul_source_rule';
                    param.multi_rule_id = this.ruleId;
                }
                let method = this.rule_type === 1 ? 'post' : 'delete';
                if (this.rule_type === 1) {
                    this.FesApi.fetch(url,param,method).then(() => {
                    this.successsAction()
                   });
                } else {
                    this.FesApi.fetch(url, {}, {
                        data: param,
                        method,
                        headers: {
                            'content-type': 'application/json'
                        }
                    }).then(() => {
                        this.successsAction()
                    });
                }
            },
            successsAction() {
                let key = this.$route.query.nodeId;
                this.$refs.deleteForm.hide();
                this.init();
                this.$Toast.success(this.$t('toastSuccess.deleteSuccess'));
                DWSMessage(key, this.ruleGroupId, 'delete');
            },
            //取消删除
            delCancel() {
                this.$refs.deleteForm.hide();
            },
            importFile(file) {
                isIE();
                const SIZE = 5;
                if (file.size > SIZE * 1024 * 1024) return this.$Toast.warn(this.$t('toastWarn.importFile'));
                let formData = new FormData();
                formData.append('file', file);
                this.FesApi.fetch("api/v1/projector/rule/batch/upload/" + this.project_id, formData).then(()=> {
                        this.$Toast.success(this.$t('toastSuccess.technicalSuccess'));
                        this.init();
                })
            },
            exportExcel() {
                isIE();
                let arr = this.$refs.tableRule.map((item)=> {
                    return item.getSelected();
                })
                let selectRule = arr.reduce((i, j)=> {
                    return i.concat(j)
                })
                if (selectRule.length === 0) {
                    this.$Toast.error(this.$t('toastError.selectRule'));
                    return;
                }
                let ruleId = [];
                let fileName = '';
                for (let i = 0; i < selectRule.length; i++) {
                    ruleId.push(selectRule[i].rule_id);
                }
                let params = {};
                params.rule_ids = ruleId;
                let exporturl = this.FesEnv.api + '/api/v1/projector/rule/batch/download';
                fetch(exporturl, {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                        'Content-Language': this.FesFesx.get('Language')
                    },
                    mode: 'cors',
                    credentials: 'include',
                    body: JSON.stringify(params),
                    responseType: 'blob'
                }).then( res => {
                    let fileNameUnicode = res.headers.get('Content-Disposition').split("filename*=")[1];
                    fileName = fileNameUnicode ? decodeURIComponent(fileNameUnicode.split("''")[1]) : '技术规则.xlsx';
                    return res.blob();
                }).then( blob => {
                    let blobUrl = window.URL.createObjectURL(blob);
                    forceDownload(blobUrl, fileName);
                }).catch( err => {
                    this.$Toast.error(`${this.$t('toastError.importFail')}:${err.message}`)
                })
            },
            taskExecution() {
                let arr = this.$refs.tableRule.map((item)=> {
                    return item.getSelected();
                })
                this.selectTask = arr.reduce((i, j)=> {
                    return i.concat(j)
                })
                if (this.selectTask.length === 0) return this.$Toast.error(this.$t('toastError.runRule'));
                this.$refs.executionUser.show();
            },
            cancle() {
                this.$refs.executionUser.hide();
            },
            submit() {
                this.$refs.form.validate(valid => {
                    if (!valid) return;
                    let rule_list = this.selectTask.map((item)=> {
                        return item.rule_id
                    })
                    let create_user = this.FesApp.get("FesUserName");
                    let params = {
                        rule_list,
                        partition: this.filterCondition,
                        execution_user: this.executor_user,
                        create_user,
                    }
                    this.FesApi.fetch('api/v1/projector/execution/rule', params,{
                        button:this.$refs.doSave,//防止重复请求
                        }).then(() => {
                            this.$Toast.success(this.$t('toastSuccess.executeSuccess'));
                            this.$refs.executionUser.hide();
                    });
                })
            },
            ruleDetail(data) {
                this.$router.push({
                    path: '/addGroupTechniqueRule',
                    query: {
                        ruleGroupId: data[0].rule_group_id,
                        id: this.project_id,
                        flowProject: this.flowProjectTag
                    }
                })
            }
        }
    };

</script>
<style scoped lang="scss">
    .ruleTable {
        margin-top: 35px;
    }
    .tableContent {
        margin-bottom: 20px;
    }
    .importBtn {
        width: 80px;
        display: inline-block;
        margin-right: 50px;
        line-height: 32px;
        text-align: center;
    }
    .fileInput {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
    }
    .execution-modal {
        /deep/
        .ui-modal-body {
            min-height: 300px;
        }
    }
    .submit-button {
        position: absolute;
        left: 50%;
        bottom: 10px;
        transform: translate(-50%);
    }
    .groupName {
        font-size: 14px;
    }
    .button-container {
        position: absolute;
        right: 0;
        bottom: 10px;
    }
</style>
