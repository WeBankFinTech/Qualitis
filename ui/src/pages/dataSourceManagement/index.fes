<template>
    <PageContainer>
        <div class="data-source-management">
            <div class="breadcrumb-container mb10">
                <span class="breadcrumb-item-link">{{ $t('dataSourceManagement.title') }}</span>
            </div>
            <Row class="mb10">
                <Cell span="4">
                    <div class="flex-box">
                        <span class="label">{{ $t('common.cluster') }}: </span>
                        <WbSelect v-model="clusterName" :placeholder="$t('common.cluster')" @on-change="selectBaseConditions">
                            <WbOption
                                v-for="item of clusters"
                                :key="item"
                                :label="item"
                                :value="item" />
                        </WbSelect>
                    </div>
                </Cell>
                <Cell span="6">
                    <div class="flex-box">
                        <span class="label">{{ $t('common.proxyUser') }}: </span>
                        <WbSelect v-model="proxyUser" :placeholder="$t('common.proxyUser')" @on-change="selectBaseConditions">
                            <WbOption
                                v-for="item of proxyUsers"
                                :key="item"
                                :label="item"
                                :value="item" />
                        </WbSelect>
                    </div>
                </Cell>
            </Row>
            <template v-if="clusterName">
                <Operation
                    :form-model="queryFormModel"
                    :data-source-types="dataSourceTypesOptions"
                    @on-add="addDataSourcePre"
                    @on-search="search(true)" />
                <div class="table-container">
                    <WbTable
                        border
                        :no-data-text="$t('common.noData')"
                        :data="dataSources">
                        <Column
                            prop="id"
                            align="left"
                            :name="$t('dataSourceManagement.dataSourceId')"
                            :index="1" />
                        <Column
                            prop="dataSourceName"
                            align="left"
                            :name="$t('dataSourceManagement.dataSourceName')"
                            :index="2" />
                        <Column
                            prop="dataSourceTypeId"
                            align="left"
                            :name="$t('dataSourceManagement.dataSourceType')"
                            :filter="dataSourceTypeFilter"
                            :index="3" />
                        <Column
                            prop="expire"
                            align="left"
                            width="100px"
                            :name="$t('common.status')"
                            :component="statusComp"
                            :index="4" />
                        <Column
                            prop="labels"
                            align="left"
                            :name="$t('myProject.label')"
                            :index="5" />
                        <Column
                            align="left"
                            width="100px"
                            :name="$t('common.version')"
                            :component="versionComp"
                            :index="6" />
                        <Column
                            prop="dataSourceDesc"
                            align="left"
                            width="400px"
                            :name="$t('common.description')"
                            :index="7" />
                        <Column
                            prop="createUser"
                            align="left"
                            :name="$t('common.founder')"
                            :index="8" />
                        <Column
                            align="left"
                            width="180px"
                            :name="$t('common.operate')"
                            :component="operationComp"
                            :index="9" />
                    </WbTable>
                    <div v-if="dataSources.length > 0" class="table-pagination pt20">
                        <span class="table-pagination-total">{{ $t('common.pageinfo', { total, pageTotal: pagination.total }) }}</span>
                        <Pagination
                            show-quick-jumper
                            :current="pagination.current"
                            :size="pagination.size"
                            :total="pagination.total"
                            :size-list="sizeList"
                            @on-change="changePage" />
                    </div>
                </div>
            </template>
        </div>
        <Modal
            ref="addOrEditModalRef"
            class="fix-top-modal"
            style="z-index: 1000;"
            :title="addOrEditModalTitle"
            :width="350"
            @on-close="addOrEditModalCloseHandler">
            <DataSourceCategory
                v-show="mode === FORM_MODE.ADD && currentStep === 1"
                :data-source-types="dataSourceTypesAcceptor(dataSourceTypes)"
                @on-select-data-source-type="selectDataSourceType" />
            <DataSourceForm
                v-if="mode === FORM_MODE.EDIT || currentStep === 2"
                :mode="mode"
                :cluster-name="clusterName"
                :proxy-user="proxyUser"
                :form-model="currentDataSource"
                :form-rules="currentDataSourceRules"
                :fields="currentFields"
                :sub-systems="subSystems"
                :form-ref.sync="dataSourceFormRef"
                @on-select="handleDataSourceFormSelect" />
            <div class="modal-footer right">
                <!-- 取消 -->
                <WbButton
                    v-show="mode === FORM_MODE.ADD && currentStep === 1"
                    @click="$refs.addOrEditModalRef.hide()">{{ $t('common.cancel') }}</WbButton>
                <!-- 测试连接 -->
                <WbButton
                    v-show="!(mode === FORM_MODE.ADD && currentStep === 1)"
                    type="primary"
                    class="footer-btn left"
                    @click="testConnectionWithoutId">{{ $t('dataSourceManagement.testConnection') }}</WbButton>
                <!-- 上一步 -->
                <WbButton
                    v-show="mode === FORM_MODE.ADD && currentStep === 2"
                    class="footer-btn"
                    @click="previous">{{ $t('dataSourceManagement.previous') }}</WbButton>
                <!-- 关闭 -->
                <WbButton
                    v-show="mode == FORM_MODE.REVIEW" type="primary"
                    class="footer-btn"
                    @click="$refs.addOrEditModalRef.hide()">{{ $t('dataSourceManagement.close') }}</WbButton>
                <!-- 完成 -->
                <WbButton
                    v-show="mode === FORM_MODE.EDIT || (mode === FORM_MODE.ADD && currentStep === 2)"
                    type="primary" class="footer-btn"
                    @click="submit">{{ $t('dataSourceManagement.finish') }}</WbButton>
            </div>
        </Modal>
        <Modal
            ref="versionsModalRef"
            class="fix-top-modal"
            style="z-index: 999;"
            :title="$t('dataSourceManagement.versionsModalTitle')"
            :width="800"
            @on-close="versionsModalCloseHandler">
            <div class="versions-container">
                <WbTable
                    border
                    :no-data-text="$t('common.noData')"
                    :data="versionsData">
                    <Column
                        prop="versionId"
                        align="left"
                        width="25%"
                        :name="$t('common.version')"
                        :index="1" />
                    <Column
                        prop="status"
                        align="left"
                        width="25%"
                        :name="$t('common.status')"
                        :filter="versionStatusFilter"
                        :index="2" />
                    <Column
                        prop="comment"
                        align="left"
                        width="25%"
                        :name="$t('common.versionDesc')"
                        :index="3" />
                    <Column
                        align="left"
                        width="25%"
                        :name="$t('common.operate')"
                        :component="versionsOperationComp"
                        :index="4" />
                </WbTable>
            </div>
        </Modal>
        <LoadingMask :show="isLoading" />
    </PageContainer>
</template>
<script>
import Vue from 'vue';
import PageContainer from '../../components/template';
import Operation from './operation';
import DataSourceCategory from './components/dataSourceCategory';
import DataSourceForm, { buildSearchParamsStr } from './components/dataSourceForm';
import {
    getEnvs,
    getClusters,
    getProxyUsers,
    getSubSystems,
    getDataSourceTypes,
    getDataSources,
    getDataSourceDetail,
    getVersions,
    getKeyDefines,
    testConnection,
    expireDataSource,
    publishDataSource,
    createDataSource,
    updateDataSource,
    updateDataSourceConnectionParams,
    setCommonParams,
    clearCommonParams,
    dataSourceTypesAcceptor
} from './dataSourceApi';
import { isNullOrUndefined } from '../../assets/js/utils';
import { FORM_MODE } from '../../assets/js/const';
import { sizeList } from '../../assets/js/sizeList';

export default {
    FesLeft: false,
    components: {
        PageContainer,
        Operation,
        DataSourceForm,
        DataSourceCategory
    },
    computed: {
        dataSourceTypesOptions() {
            const all = {
                id: '',
                name: this.$t('common.all')
            };
            return this.dataSourceTypes.concat(all);
        },
        addOrEditModalTitle() {
            let title = '';
            switch (this.mode) {
                case FORM_MODE.ADD:
                    title = this.$t('dataSourceManagement.addDataSource');
                    break;
                case FORM_MODE.EDIT:
                    title = this.$t('dataSourceManagement.editDataSource');
                    break;
                case FORM_MODE.REVIEW:
                    title = this.$t('dataSourceManagement.reviewDataSource');
                    break;
            }
            return title;
        }
    },
    FesData() {
        const that = this;
        return {
            sizeList,
            FORM_MODE,
            dataSourceTypesAcceptor,
            isLoading: false,
            clusterName: '',
            proxyUser: '',
            mode: '',
            queryFormModel: {
                dataSourceName: '',
                dataSourceType: ''
            },
            currentStep: 1,
            currentDataSource: {},
            currentDataSourceRules: {
                dataSourceName: [
                    {required: true, message: this.$t('dataSourceManagement.enterDataSourceName')}
                ],
                dataSourceDesc: [
                    {required: false, message: this.$t('dataSourceManagement.enterDataSourceDesc')}
                ],
                subSystemId: [
                    {required: false, message: this.$t('dataSourceManagement.enterDataSourceDesc')}
                ],
                labels: [
                    {required: false, message: this.$t('dataSourceManagement.enterLabels')}
                ]
            },
            currentFields: [],
            dataSourceFormRef: null,
            clusters: [],
            proxyUsers: [],
            envs: [],
            subSystems: [],
            dataSourceTypes: [],
            total: 0,
            pagination: {
                current: 1,
                size: sizeList[1],
                total: 0
            },
            dataSources: [],
            versionsData: [],
            tableStatusMap: [
                {status: false, name: this.$t('dataSourceManagement.canUse')},
                {status: true, name: this.$t('dataSourceManagement.expire')}
            ],
            versionStatusMap: [
                {status: 1, name: this.$t('dataSourceManagement.published')},
                {status: 0, name: this.$t('dataSourceManagement.unPublish')},
                {status: 2, name: this.$t('dataSourceManagement.canNotPublish')}
            ],
            statusComp(row) {
                return new Vue({
                    render(h) {
                        let result = {};
                        let color = 'green';
                        if (that.envs) {
                            result = that.tableStatusMap.find((item) => row.expire === item.status) || {};
                        }
                        if (result.status) {
                            color = 'red';
                        }
                        return h('p', {style: {color}}, result.name);
                    }
                });
            },
            versionComp(row) {
                return new Vue({
                    render(h) {
                        return h('WbButton', {
                            class: ['version-button'],
                            props: {
                                type: 'primary',
                                disabled: row.expire
                            },
                            on: {
                                click: () => {
                                    if (row.expire) return;
                                    getVersions(row.id).then((versions) => {
                                        let lastPulishIndex = Infinity;
                                        that.versionsData = versions;
                                        that.versionsData.sort((a, b)=>{
                                            if (a.versionId > b.versionId) {
                                                return -1;
                                            }
                                            if (a.versionId < b.versionId) {
                                                return 1;
                                            }
                                            return 0;
                                        });
                                        for (let index = 0; index < that.versionsData.length; index++) {
                                            const element = that.versionsData[index];
                                            if (lastPulishIndex < index) {  //不能发布
                                                element.status = 2;
                                            } else {
                                                element.status = 0;
                                            }
                                            if (row.publishedVersionId == element.versionId) {
                                                lastPulishIndex = index;
                                                element.status = 1;
                                            }
                                        }
                                        that.$refs.versionsModalRef.show();
                                    }).finally(() => {
                                        that.isLoading = false;
                                    });
                                    that.isLoading = true;
                                }
                            }
                        }, row.versionId);
                    }
                });
            },
            operationComp(row) {
                const expire = row.expire;
                return new Vue({
                    data() {
                        return {
                            operations: [
                                {
                                    id: '1',
                                    text: that.$t('common.edit'),
                                    handler: () => {
                                        that.reviewOrEditPre(row, FORM_MODE.EDIT);
                                    }
                                },
                                {
                                    id: '2',
                                    text: that.$t('dataSourceManagement.expire'),
                                    handler: () => {
                                        that.expireDataSource(row);
                                    }
                                },
                                {
                                    id: '3',
                                    text: that.$t('dataSourceManagement.testConnection'),
                                    handler: () => {
                                        that.testConnectionWithId(row);
                                    }
                                }
                            ]
                        };
                    },
                    methods: {
                        createOperationComp(h, config) {
                            return h('li', {
                                class: {
                                    'operation-item': true,
                                    disabled: ['1', '2'].includes(config.id) && expire
                                },
                                on: {
                                    click: () => {
                                        if (['1', '2'].includes(config.id) && expire) return;
                                        config.handler();
                                    }
                                }
                            }, config.text);
                        }
                    },
                    render(h) {
                        return h('ul', {
                            class: ['operation-list']
                        }, this.operations.map((item) => this.createOperationComp(h, item)));
                    }
                });
            },
            versionsOperationComp(row) {
                return new Vue({
                    data() {
                        return {
                            operations: [
                                {
                                    id: '1',
                                    type: '',
                                    isShow: (data) => String(data.status) === '0',
                                    text: that.$t('common.publish'),
                                    handler: () => {
                                        that.publishDataSource(row);
                                    }
                                },
                                {

                                    id: '2',
                                    type: '',
                                    isShow: true,
                                    text: that.$t('common.view'),
                                    handler: () => {
                                        that.reviewOrEditPre(Object.assign({}, row, {
                                            id: row.datasourceId
                                        }), FORM_MODE.REVIEW);
                                    }
                                },
                                {
                                    id: '3',
                                    type: '',
                                    isShow: (data) => String(data.status) === '2',
                                    text: that.$t('common.rollback'),
                                    handler: () => {
                                        that.rollbackDataSource(row);
                                    }
                                },
                                {

                                    id: '4',
                                    type: 'primary',
                                    isShow: true,
                                    text: that.$t('dataSourceManagement.testConnection'),
                                    handler: () => {
                                        that.testConnectionWithId(Object.assign({}, row, {
                                            id: row.datasourceId
                                        }));
                                    }
                                }
                            ]
                        };
                    },
                    methods: {
                        createBtnComp(h, config) {
                            return h('WbButton', {
                                class: ['btn-item'],
                                props: {
                                    type: config.type
                                },
                                on: {
                                    click: () => {
                                        config.handler();
                                    }
                                }
                            }, config.text);
                        }
                    },
                    render(h) {
                        const operationsComp = this.operations
                            .filter((item) => item.isShow instanceof Function ? item.isShow(row) : !!item.isShow)
                            .map((item) => this.createBtnComp(h, item));
                        return h('div', {
                            class: ['btn-list']
                        }, operationsComp);
                    }
                });
            }
        };
    },
    FesReady() {
        this.initClusters();
        this.initProxyUsers();
        this.initSubSystems();
    },
    FesDestroy() {
        clearCommonParams();
    },
    methods: {
        initClusters() {
            getClusters().then((clusters) => {
                this.clusters = clusters;
            });
        },
        initProxyUsers() {
            getProxyUsers().then((proxyUsers) => {
                this.proxyUsers = proxyUsers;
            });
        },
        initEnvs() {
            getEnvs().then((envs) => {
                this.envs = envs;
            });
        },
        initDataSourceTypes() {
            getDataSourceTypes().then((dataSourceTypes) => {
                this.dataSourceTypes = dataSourceTypes;
            });
        },
        initCurrentDataSource() {
            this.currentDataSource = {
                dataSourceTypeId: '',
                dataSourceName: '',
                dataSourceDesc: '',
                subSystemId: '',
                labels: '',
                connectParams: {}
            };
        },
        // 获取子系统列表
        initSubSystems() {
            getSubSystems().then((data) => {
                this.subSystems = data;
            });
        },
        dataSourceTypeFilter(value) {
            let result = {};
            if (Array.isArray(this.dataSourceTypes)) {
                result = this.dataSourceTypes.find((item) => String(item.id) === String(value));
            }
            return result ? result.name : value;
        },
        versionStatusFilter(value) {
            const target = this.versionStatusMap.find((item) => String(item.status) === String(value));
            return target ? target.name : value;
        },
        selectBaseConditions() {
            this.currentDataSource = {};
            this.dataSourceTypes = [];
            this.dataSources = [];
            this.versionsData = [];
            if (this.clusterName) {
                setCommonParams({
                    clusterName: this.clusterName,
                    proxyUser: this.proxyUser
                });
                this.initEnvs();
                this.initDataSourceTypes();
                this.search();
            } else {
                clearCommonParams();
            }
        },
        selectDataSourceType(dataSourceType) {
            const dataSourceTypeId = dataSourceType.id;
            getKeyDefines(dataSourceTypeId).then((keyDefines) => {
                this.currentStep = 2;
                this.currentDataSource.dataSourceTypeId = dataSourceTypeId;
                this.currentFields = keyDefines.filter(item => item.key !== 'subSystem');
                this.currentFields.forEach((field) => {
                    if (field.valueType === 'SELECT') {
                        field.dataSource = JSON.parse(field.dataSource);
                    }
                    if (!isNullOrUndefined(field.refId) && !isNullOrUndefined(field.refValue)) {
                        const target = this.currentFields.find((item) => item.id === field.refId);
                        if (target) {
                            field.show = this.currentDataSource.connectParams[target.key] === field.refValue;
                        } else {
                            field.show = false;
                        }
                    } else {
                        field.show = true;
                    }
                    const rules = [
                        {required: field.require, message: `请输入${field.name}`}
                    ];
                    const reg = field.valueRegex;
                    if (reg) {
                        rules.push({pattern: new RegExp(reg, 'g'), message: '不符合规则'});
                    }
                    if (this.mode === FORM_MODE.ADD || isNullOrUndefined(this.currentDataSource.connectParams[field.key])) {
                        this.$set(this.currentDataSource.connectParams, field.key, field.defaultValue || '');
                    }
                    this.$set(this.currentDataSourceRules, field.key, rules);
                });
            });
        },
        handleDataSourceFormSelect(payload) {
            const field = payload.field;
            const value = payload.value;
            this.currentFields.forEach((item) => {
                if (item.refId && item.refId === field.id) {
                    item.show = item.refValue === value;
                }
            });
        },
        handleDataSourceFormModel(dataSourceForm) {
            if (!dataSourceForm) return dataSourceForm;
            const newForm = this.FesUtil._.cloneDeep(dataSourceForm);
            if (newForm.dataSourceTypeId === 5) {
                const connectParams = newForm.connectParams;
                let authType;
                if (!connectParams) return newForm;
                authType = connectParams.authType;
                if (authType === 'accountPwd') {
                    connectParams.mkPrivate = '';
                }
            }
            return newForm;
        },
        commonTestConnection(dataSource) {
            const urlSearchParamsStr = buildSearchParamsStr({
                clusterName: this.clusterName,
                proxyUser: this.proxyUser
            });
            return new Promise((resolve, reject) => {
                testConnection(urlSearchParamsStr, this.handleDataSourceFormModel(dataSource)).then((res) => {
                    if (res.ok) {
                        this.$Toast.success('Success!');
                    }
                    resolve();
                }).catch((error) => {
                    reject(error);
                });
            });
        },
        testConnectionWithId(data) {
            getDataSourceDetail(
                data.id,
                data.versionId
            ).then((dataSource) => {
                return this.commonTestConnection(dataSource);
            }).finally(() => {
                this.isLoading = false;
            });
            this.isLoading = true;
        },
        testConnectionWithoutId() {
            const data = Object.assign({}, this.currentDataSource, {
                createSystem: 'qualitis',
            });
            this.commonTestConnection(data).finally(() => {
                this.isLoading = false;
            });
            this.isLoading = true;
        },
        expireDataSource(data) {
            const urlSearchParamsStr = buildSearchParamsStr({
                dataSourceId: data.id,
                clusterName: this.clusterName,
                proxyUser: this.proxyUser
            });
            expireDataSource(urlSearchParamsStr).then(() => {
                this.search();
            });
        },
        publishDataSource(data) {
            const urlSearchParamsStr = buildSearchParamsStr({
                dataSourceId: data.datasourceId,
                versionId: data.versionId,
                clusterName: this.clusterName,
                proxyUser: this.proxyUser
            });
            publishDataSource(urlSearchParamsStr).then(() => {
                this.$Toast.success('Publish Success!');
                this.search();
                this.versionsData = [];
                this.$refs.versionsModalRef.hide();
            });
        },
        rollbackDataSource(data) {
            const urlSearchParamsStr = buildSearchParamsStr({
                dataSourceId: data.datasourceId,
                clusterName: this.clusterName,
                proxyUser: this.proxyUser
            });
            updateDataSourceConnectionParams(
                urlSearchParamsStr,
                data.connectParams,
                this.$t('dataSourceManagement.rollbackComment', {version: data.versionId})
            ).then(() => {
                this.$Toast.success('Rollback Success!');
                this.search();
                this.versionsData = [];
                this.$refs.versionsModalRef.hide();
            });
        },
        versionsModalCloseHandler() {
            this.versionsData = [];
        },
        addDataSourcePre() {
            this.mode = FORM_MODE.ADD;
            this.initCurrentDataSource();
            this.$refs.addOrEditModalRef.show();
        },
        addOrEditModalCloseHandler() {
            this.mode = FORM_MODE.ADD;
            this.currentStep = 1;
            this.currentDataSource = {};
            this.currentFields = [];
        },
        addDataSourceSuccessHandler() {
            this.pagination.current = Math.ceil((this.total + 1) / this.pagination.size);
            this.editDataSourceSuccessHandler();
        },
        editDataSourceSuccessHandler() {
            this.search();
            this.$refs.addOrEditModalRef.hide();
        },
        reviewOrEditPre(data, mode) {
            getDataSourceDetail(
                data.id,
                data.versionId
            ).then((dataSource) => {
                const connectParams = Object.assign({}, dataSource.connectParams);
                const subSystem = connectParams.subSystem || '';
                delete connectParams.subSystem;
                this.mode = mode;
                this.currentStep = 2;
                this.currentDataSource = {
                    id: data.id,
                    dataSourceTypeId: dataSource.dataSourceTypeId,
                    dataSourceName: dataSource.dataSourceName,
                    dataSourceDesc: dataSource.dataSourceDesc,
                    subSystemId: subSystem,
                    labels: dataSource.labels,
                    connectParams: connectParams || {}
                };
                this.selectDataSourceType({id: dataSource.dataSourceTypeId});
                this.$refs.addOrEditModalRef.show();
            });
        },
        previous() {
            this.currentStep = 1;
            Object.keys(this.currentDataSource).forEach((key) => {
                this.currentDataSource[key] = key === 'connectParams' ? {} : '';
            });
            Object.keys(this.currentDataSourceRules).forEach((key) => {
                if (!['dataSourceName', 'dataSourceDesc', 'subSystemId', 'labels'].includes(key)) {
                    delete this.currentDataSourceRules[key];
                }
            });
        },
        changePage(pagination) {
            this.pagination.current = pagination.current;
            this.pagination.size = pagination.size;
            this.search();
        },
        search(flag = false) {
            if (flag) this.pagination.current = 1;
            getDataSources(
                this.queryFormModel.dataSourceName,
                this.queryFormModel.dataSourceType,
                this.pagination.current,
                this.pagination.size
            ).then((res) => {
                this.total = res.total;
                this.pagination.total = Math.ceil(this.total / this.pagination.size);
                this.dataSources = res.data;
            }).finally(() => {
                this.isLoading = false;
            });
            this.isLoading = true;
        },
        buildSubmitReqData(params) {
            let method;
            let urlSearchParamsStr;
            let comment;
            let successMsg;
            let successHandler;
            if (this.mode === FORM_MODE.ADD) {
                method = createDataSource;
                urlSearchParamsStr = buildSearchParamsStr({
                    clusterName: this.clusterName,
                    proxyUser: this.proxyUser
                });
                comment = '初始化版本';
                successMsg = '创建成功！';
                successHandler = this.addDataSourceSuccessHandler;
            } else {
                method = updateDataSource;
                urlSearchParamsStr = buildSearchParamsStr({
                    dataSourceId: params.id,
                    clusterName: this.clusterName,
                    proxyUser: this.proxyUser
                });
                comment = '版本更新';
                successMsg = '编辑成功！';
                successHandler = this.editDataSourceSuccessHandler;
            }
            return {
                method,
                urlSearchParamsStr,
                comment,
                successMsg,
                successHandler
            };
        },
        submit() {
            if (!this.dataSourceFormRef) return;
            this.dataSourceFormRef.validate((isValid) => {
                if (!isValid) return;
                const params = Object.assign({}, this.currentDataSource, {createSystem: 'qualitis'});
                params.connectParams.subSystem = params.subSystemId;
                delete params.subSystemId;
                const submitData = this.buildSubmitReqData(params);
                submitData.method(submitData.urlSearchParamsStr, params).then((res) => {
                    const urlSearchParamsStr = buildSearchParamsStr({
                        dataSourceId: res.id,
                        clusterName: this.clusterName,
                        proxyUser: this.proxyUser
                    });
                    return updateDataSourceConnectionParams(urlSearchParamsStr, params.connectParams, submitData.comment);
                }).then(() => {
                    this.$Toast.success(submitData.successMsg);
                    if (submitData.successHandler instanceof Function) {
                        submitData.successHandler();
                    }
                });
            });
        }
    }
};
</script>
<style lang="scss" scoped>
.data-source-management {
    padding: 20px;
    font-size: 14px;
    .table-container {
        margin-top: 24px;
    }
    /deep/
    .operation-list {
        display: flex;
        align-items: center;
        .operation-item {
            padding: 1px 7px 2px;
            line-height: 2;
            font-size: 12px;
            color: #fff;
            background-color: #2d8cf0;
            border-color: #2d8cf0;
            border-radius: 0;
            outline: 0;
            cursor: pointer;
            &:first-of-type {
                border-top-left-radius: 3px;
                border-bottom-left-radius: 3px;
            }
            &:last-of-type {
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }
            &:not(:last-of-type) {
                border-right-color: #2b85e4;
            }
            &.disabled {
                opacity: 0.6;
                cursor: not-allowed;
            }
        }
    }
    /deep/
    .version-button {
        padding: 1px 7px 2px;
        line-height: 18px;
        background-color: #2d8cf0;
        border-color: #2d8cf0;
        border-radius: 4px;
        font-size: 12px;
    }
}
.versions-container {
    max-height: 700px;
    overflow: auto;
}
.ui-modal {
    &.fix-top-modal {
        /deep/
        .ui-modal-dialog {
            top: 100px;
        }
    }
}
.modal-footer {
    margin-top: 16px;
    text-align: right;
    &.right {
        text-align: right;
    }
    .footer-btn {
        margin-right: 8px;
        &:first-of-type {
            float: left;
        }
        &:last-of-type {
            margin-right: 0;
        }
        &.left {
            float: left;
        }
    }
}
/deep/
.btn-list {
    display: flex;
    align-items: center;
    .btn-item {
        margin-right: 10px;
        &:last-of-type {
            margin-right: 0;
        }
    }
}
/deep/
.flex-box {
    display: flex;
    align-items: center;
    white-space: nowrap;
    .label {
        min-width: 90px;
        text-align: right;
    }
}
</style>
