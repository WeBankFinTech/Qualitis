<template>
    <pageContainer>
        <Row class="all-wrapper p20">
            <div class="breadcrumb-container mb10">
                <icon type="ios-arrow-round-back" class="mr10 cursor" size="16" @click="FesApp.router.back()" />
                <span class="breadcrumb cursor" @click="getRouter('/taskQuery')">{{ $t('taskQuery.taskQuery') }}</span>
                <span class="breadcrumb-item-separator">/</span>
                <span class="breadcrumb-item-link">{{ $t('taskDetail.taskRule') }}</span>
            </div>
            <Cell span="24" class="lineItem mt20">
                <div>{{ $t('common.number') }}:{{ id }}</div>
            </Cell>
            <Cell v-for="task in tasks" :key="task.task_id" span="24" class="lineItem taskItem">
                <div v-if="task.task_rules" class="ruleName">
                    {{ $t('taskDetail.taskRule') }}：{{ getRuleNames(task.task_rules) }}
                </div>
                <div class="lineItem detail inline-block">
                    <div>{{ $t('taskDetail.startTime') }} {{ task.start_time }}</div>
                    <div v-if="task.end_time" class="pl20 pr20">{{ $t('taskDetail.endTime') }} {{ task.end_time }}</div>
                    <div class="pr20" @click="searchReason(task.task_id)">&nbsp;&nbsp;{{ $t('common.status') }}:  <a href="javascript:void(0);" style="color:#657180;" :class="{ 'status': task.task_id}">{{ formatStatus(task.status) }}</a></div>
                    <Wb-button v-if="task.exception_message" type="primary" @click="moreLog(task)">{{ task.showMore ? `${$t('taskDetail.collapse')}` : `${$t('taskDetail.moreErrors')}` }}</Wb-button>
                    <Wb-button v-else type="primary" @click="moreLog(task)">{{ task.showMore ? `${$t('taskDetail.collapse')}` :`${$t('taskDetail.moreLogs')}` }}</Wb-button>
                </div>
                <div class="lineItem" :class="logColors(task)">
                    <wb-input v-model="task.logtxt" :rows="8" autosize type="textarea" readonly />
                </div>
            </Cell>
        </Row>
    </pageContainer>
</template>

<script type="text/ecmascript-6">
    import pageContainer from '../../components/template';
    export default {
        FesHeader: true,
        FesLeft: false,
        components: {
            pageContainer
        },
        FesReady: function() {
            this.id = this.$route.query.id;
            let taskInformation = this.FesFesx.task_info_map[this.id];
            let tasks = [];
            if (taskInformation.exception_message) {
                tasks.push(taskInformation)
            } else {
                tasks = taskInformation.task
            }
            if(Array.isArray(tasks)){
                tasks.map(task => task.logtxt = "")
            }
            this.tasks = tasks || [];
            this.init();
        },
        data() {
            return  {
                id: "",
                tasks : []
            }
        },
        computed: {
            statusList() {
                return this.$t('taskDetail.statusList')
            }
        },
        methods:{
            init() {
                let getLogPromise = [];
                this.tasks.forEach(task => {
                    if (task.cluster_id && task.task_id) {
                        getLogPromise.push(this.getLog({cluster_id: task.cluster_id, task_id: task.task_id}));
                    }else {
                        task.logtxt = task.exception_message;
                        if (task.submit_time) {
                            task.start_time = task.submit_time;
                        }
                    }
                });
                Promise.all(getLogPromise).then(logs => {
                    logs.forEach(logs => {
                        this.tasks.forEach(task => {
                            if(task.task_id == logs.task_id) task.logtxt = logs.log;
                        })
                    })
                    this.tasks = [].concat(this.tasks);
                })
            },
            getLog({ task_id, cluster_id })  {
                return new Promise(( resolve, reject ) => {
                    this.FesApi.fetch(`api/v1/projector/job/log/${cluster_id}/${task_id}`, 'get').then(( res ) => {
                        resolve({task_id, log: res});
                    }).catch(err => {
                        reject(err);
                    })
                })

            },
            moreLog(task){
                task.showMore = !task.showMore;
                this.tasks = [].concat(this.tasks)
            },
            getRuleNames(rules) {
                return rules.map(it=>it.rule_name).join(',');
            },
            formatStatus(data) {
                let list = eval('('+ this.statusList + ')');
                return list[data];
            },
            logColors(task) {
                return {'logArea':!task.showMore,'showAllLog':task.showMore};
            },
            searchReason(id) {
                if (!id) return;
                this.$router.push({
                    path: "/verifyFailData",
                    query: {
                        application_id: this.id,
                        task_id: id
                    }
                })
            },
            // 面包屑跳转
            getRouter(e) {
              this.$router.push({ path: e })
            },

        }
    };
</script>

<style scoped lang="scss">
    .middle-wrapper {
        width: 95%;
        padding-left: 20px;
    }
    .lineItem {
        margin: 15px 0 0;
    }
    .logArea {
        max-height: 300px;
        overflow:auto;
        border: 1px solid #d7dde4;
        outline: 0;
        background-image: none;
        line-height: 1.5;
        font-size: 12px;
        border-radius: 4px;
    }
    .taskItem {
        border: 1px solid #e3e8ee;
        padding: 20px;
    }
    .ruleName {
        display: inline-block;
    }
    .detail {
        display: flex;
        line-height: 40px;
        height: 40px;
    }
    .lineItem.logArea   {
        /deep/
        textarea{
            border: none;
            overflow: hidden !important;
        }
    }
    .lineItem.showAllLog  {
        /deep/
        textarea{
            overflow: hidden;
        }
    }
    .status {
        color: #3399ff !important;
        text-decoration: underline;
    }
</style>
